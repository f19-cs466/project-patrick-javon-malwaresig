# This is our code!
# This class will help us interact with the user and our YaraScanner class to scan files and identify 'malware'
# Date: 11/21/19
# Version 1.0
# Authors:
    # Patrick Sacchet
    # Javon Kitson

import sys
import os
import yara

from YaraScanner import *

# Function prints help statement if argument is found
# Input: None
# Returns: None
def print_help():
    print("Here's how you run our code:")
    print("\tpython MalwareSig.py -arguments")
    print("Optional arguments you can add if you'd like:")
    print("\t-h - Print help message\n" +
    "\t-r - Pass rule files (requires malicious file(s) passed in addition)\n" +
    "\t-m - Malicious file(s) to be scanned (requires rule files passed in addition)\n" +
    "If no arguments are passed, program will scan test files with test rule files by default")

# Function prints usage statement since user called program incorrectly
# Input: None
# Returns: None
def print_usage():
    print("Invlalid call of MalwareSig.py, call as follows:")
    print("\tpython MalwareSig.py -arguments")
    print("Optional arguments:")
    print("\t-h - Print help message\n" +
    "\t-r - Pass rule files (requires malicious file(s) passed in addition)\n" +
    "\t-m - Malicious file(s) to be scanned (requires rule files passed in addition)\n" +
    "If no arguments are passed, program will scan test files with test rule files by default")

# Function will parse command line arguments, call functions accordingly dependent on arguments passed
# Input: args - arguments grabbed from the command line
# Returns: None (calls function or exits)
def parse_commands(args):
    if("-h" in args):
        print_help()
    elif(("-r" in args) and ("-m" in args)):
        rule_ind = args.index('-r')
        mal_ind = args.index('-m')
        try:
            rule_file_loc = args[rule_ind + 1]
            mal_file_loc = args[mal_ind + 1]
        except Exception as e:
            print("You need to pass in a rule file location and malicious file location, try again")
            exit(0)
    else:
        print("No parameters detected, running default tests...")

# Main functionality 
def main():
    parse_commands(sys.argv)




if __name__ == '__main__':
    main()
